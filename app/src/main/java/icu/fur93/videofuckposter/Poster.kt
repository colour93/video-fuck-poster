package icu.fur93.videofuckposter

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.os.Environment
import icu.fur93.ffmpeg.FFmpegManager
import icu.fur93.ffmpeg.video.VideoInfo
import icu.fur93.videofuckposter.Utils.formatTimeCode
import icu.fur93.videofuckposter.Utils.humanReadableByteCount
import java.io.File
import java.io.FileOutputStream
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

object Poster {
    fun drawVideoItemBitmap(bitmap: Bitmap, time: Int): Bitmap {
        val spacing = 10f
        val contentSize = 64f

        val videoItemBitmap =
            Bitmap.createBitmap(bitmap.width, bitmap.height + 100, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(videoItemBitmap)
        val paint = Paint().apply {
            color = Color.WHITE
            textSize = contentSize
            isAntiAlias = true
        }
        val timeCode = formatTimeCode(time)
        canvas.drawBitmap(bitmap, 0f, 0f, null)
        canvas.drawText(timeCode, 0f, bitmap.height + contentSize + spacing, paint)
        return videoItemBitmap
    }

    fun drawVideoInfoBitmap(videoInfo: VideoInfo, width: Int): Bitmap {
        val contentSize = 72f
        val spacingSize = 16f

        val videoInfoBitmap = Bitmap.createBitmap(
            width,
            (contentSize + spacingSize + contentSize + spacingSize + contentSize).toInt(),
            Bitmap.Config.ARGB_8888
        )
        val canvas = Canvas(videoInfoBitmap)
        val titlePaint = Paint().apply {
            color = Color.WHITE
            textSize = contentSize
            isAntiAlias = true
        }
        val contentPaint = Paint().apply {
            color = Color.WHITE
            textSize = contentSize
            isAntiAlias = true
        }
        val duration = formatTimeCode(videoInfo.duration.toInt())
        canvas.drawText("文件名：${File(videoInfo.path).name}", 0f, contentSize, titlePaint)
        canvas.drawText(
            "视频时长：$duration",
            0f,
            contentSize + spacingSize + contentSize,
            contentPaint
        )
        canvas.drawText(
            "文件尺寸：${humanReadableByteCount(File(videoInfo.path).length())}",
            0f,
            contentSize + spacingSize + contentSize + spacingSize + contentSize,
            contentPaint
        )
        return videoInfoBitmap
    }

    fun drawCopyrightBitmap(width: Int): Bitmap {
        val videoInfoBitmap = Bitmap.createBitmap(
            width,
            100,
            Bitmap.Config.ARGB_8888
        )
        val canvas = Canvas(videoInfoBitmap)
        val paint = Paint().apply {
            color = Color.GRAY
            textSize = 64f
            isAntiAlias = true
        }
        canvas.drawText("Generated by colour93/video-fuck-poster", 0f, 72f, paint)
        return videoInfoBitmap
    }

    fun drawVideoPoster(
        ffmpegManager: FFmpegManager,
        videoInfo: VideoInfo,
        rows: Int,
        cols: Int
    ): File {
        val imageCount = rows * cols;

        val margin = 32f;
        val padding = 32f;
        val spacing = 16f;

        val durationPointList = Utils.getPoints(videoInfo.duration, imageCount)

        val videoItemBitmapList = durationPointList.map { durationPoint ->
            drawVideoItemBitmap(
                BitmapFactory.decodeFile(
                    ffmpegManager.captureFrameToFile(
                        videoInfo.path,
                        durationPoint.toFloat()
                    ).toString()
                ), durationPoint.toInt()
            )
        }

        val width = cols * videoItemBitmapList[0].width + (cols - 1) * spacing.toInt();

        val copyrightBitmap = drawCopyrightBitmap(width)

        val videoInfoBitmap = drawVideoInfoBitmap(videoInfo, width)

        val height =
            (videoInfoBitmap.height + margin.toInt() + (videoItemBitmapList[0].height + spacing) * rows + copyrightBitmap.height).toInt();

        val videoPosterBitmap = Bitmap.createBitmap(
            width,
            height,
            Bitmap.Config.ARGB_8888
        )
        val canvas = Canvas(videoPosterBitmap)

        canvas.drawBitmap(videoInfoBitmap, 0f, 0f, null)

        for ((i, item) in videoItemBitmapList.withIndex()) {
            val row = i / cols
            val col = i % cols

            val left = col * item.width + spacing * col
            val top = videoInfoBitmap.height + margin + row * (item.height + spacing)

            canvas.drawBitmap(item, left, top, null)
        }

        canvas.drawBitmap(copyrightBitmap, 0f, (height - copyrightBitmap.height).toFloat(), null)

        val paddingPosterBitmap =
            Bitmap.createBitmap(
                (width + padding * 2).toInt(),
                (height + padding * 2).toInt(), Bitmap.Config.ARGB_8888
            )
        val paddingPosterCanvas = Canvas(paddingPosterBitmap)

        paddingPosterCanvas.drawRect(
            0f,
            0f,
            width + padding * 2,
            height + padding * 2,
            Paint().apply {
                color = Color.BLACK
            })

        paddingPosterCanvas.drawBitmap(videoPosterBitmap, padding, padding, null)

        val dir = File(
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),
            "VideoFuckPoster/poster",
        )
        if (!dir.exists()) {
            dir.mkdirs()
        }
        val videoPosterPng = File(
            dir,
            "${
                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS"))
            }.png"
        )
        FileOutputStream(videoPosterPng).use { outputStream ->
            paddingPosterBitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
        }
        Utils.clearCache()
        return videoPosterPng
    }
}